#!/bin/bash

declare -r EXECUTABLE=$(basename ${BASH_SOURCE[0]})
declare -r BASE_DIR=$(dirname ${BASH_SOURCE[0]})
declare -r BACKUP_DIR="$BASE_DIR/_backup"

usage() {
  cat <<EOF
USAGE
  ./$EXECUTABLE [OPTION]... [PACKAGE]...

DESCRIPTION
  Symlinks dotfiles into home directory. If no package names are specified, all
  packages will be (un)installed. Specify package names to (un)install a subset
  of packages.

  -h, --help       Display this message
  -u, --uninstall  Sets setup mode to uninstall packages. Will restore any
                   backup dotfiles if they exist for the packages uninstalled.

DEPENDENCIES
  GNU Stow (https://www.gnu.org/software/stow/) is required for this script to
  run. You will be prompted to install it if it isn't already installed.

EXAMPLES
  ./$EXECUTABLE
    Install everything

  ./$EXECUTABLE bash vim
    Only install bash and vim dotfiles

  ./$EXECUTABLE --uninstall
    Uninstall everything

  ./$EXECUTABLE --uninstall bash vim
    Only uninstall bash and vim dotfiles
EOF
}

unrecognized_option() {
  cat <<EOF
$EXECUTABLE: unrecognized option '$1'
Try '$EXECUTABLE --help' for more information.
EOF
}

echo_error() {
  echo -e "\033[0;31m$1\033[0m"
}

echo_warn() {
  echo -e "\033[0;33m$1\033[0m"
}

echo_success() {
  echo -e "\033[0;32m$1\033[0m"
}

echo_info() {
  echo -e "\033[0;36m$1\033[0m"
}

######## Parse args

uninstall_mode=0
packages=()

for arg in $@; do
  case $arg in 
    --uninstall | -u)
      uninstall_mode=1
      ;;
    --help | -h)
      usage
      exit 0
      ;;
    --* | -*)
      unrecognized_option $arg
      exit 1
      ;;
    *)
      packages+=($arg)
      ;;
  esac
done

######## Prepare list of packages to (un)install

# Directories starting with _ are reserved for script usage

# If no package names were supplied, use all packages by default
if [[ -z ${packages[@]} ]]; then
  packages=($(find $BASE_DIR -maxdepth 1 -mindepth 1 -type d -not -path '*/[\._]*'))
else
  for package in ${packages[@]}; do
    package=$(basename $package)

    if [[ ! -d "$BASE_DIR/$package" ]] || [[ $package == _* ]]; then
      unrecognized_option $package
      exit 1
    fi
  done
fi

for i in ${!packages[@]}; do
  packages[$i]=$(basename ${packages[$i]})
done

declare -r packages

######## Install stow if not present

auto_detect_pkg_mgr() {
  if which apt > /dev/null; then
    eval "$1=apt"
  elif which apt-get > /dev/null; then
    eval "$1=apt-get"
  elif which brew > /dev/null; then
    eval "$1=brew"
  elif which dnf > /dev/null; then
    eval "$1=dnf"
  elif which yum > /dev/null; then
    eval "$1=yum"
  elif which pacman > /dev/null; then
    eval "$1=pacman"
  else
    echo_error "Was not able to auto-detect your package manager."
    exit 6
  fi
}

if ! which stow > /dev/null; then
  echo_info "GNU Stow is required for this script to run. Attempting to auto-install..."
  auto_detect_pkg_mgr pkg_mgr

  echo -n "Update package lists before installing stow (y/n): "
  read update_package_lists

  if [[ $update_package_lists == y?(es) ]]; then
    echo_warn "Updating package lists..."

    if [[ $pkg_mgr == pacman ]]; then
      sudo pacman --refresh > /dev/null 2>&1
    elif [[ $pkg_mgr == dnf ]]; then
      sudo dnf --refresh > /dev/null 2>&1
    else
      sudo $pkg_mgr update > /dev/null 2>&1
    fi
  fi

  echo_warn "Installing stow..."
  if [[ $pkg_mgr == pacman ]]; then
    sudo pacman -S stow
  elif [[ $pkg_mgr == brew ]]; then
    brew install -y stow
  else
    sudo $pkg_mgr install -y stow
  fi

  if [[ $? -gt 0 ]]; then
    echo_error "Was not able to auto-install GNU Stow. Install it before running this script."
    exit 7
  fi

  echo_success "Stow installed!"
fi

######## (Un)install dotfile packages

backup() {
  for package in ${packages[@]}; do
    conflicts=($(stow -t $HOME -d $BASE_DIR -n $package 2>&1 | grep "existing target" | cut -d ":" -f2))

    if [[ ${#conflicts[@]} -gt 0 ]]; then
      echo_warn "Conflicts found for package [$package]. Moving to backup dir [$BACKUP_DIR/$package]..."
    fi

    for conflict in ${conflicts[@]}; do
      mkdir -p $BACKUP_DIR/$package/$(dirname $conflict)
      mv $HOME/$conflict $BACKUP_DIR/$package/$(dirname $conflict)
    done
  done
}

restore() {
  for package in ${packages[@]}; do
    backups=($(ls -A $BACKUP_DIR/$package 2> /dev/null))

    for backup in ${backups[@]}; do
      mv $BACKUP_DIR/$package/$backup $HOME
    done

    if [[ ${#backups[@]} -gt 0 ]]; then
      rm -r $BACKUP_DIR/$package
    fi
  done
}

if [[ $uninstall_mode == 0 ]]; then
  backup
  stow -t $HOME -d $BASE_DIR ${packages[@]}
  echo_success "Dotfiles installed for ${packages[@]}"
else
  stow -t $HOME -d $BASE_DIR -n -D ${packages[@]} > /dev/null 2>&1 
  if [[ $? == 0 ]]; then
    stow -t $HOME -d $BASE_DIR -D ${packages[@]} > /dev/null
    restore
  fi
  echo_success "Dotfiles uninstalled for ${packages[@]}"
fi

